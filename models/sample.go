package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Sample sample
// swagger:model Sample
type Sample struct {

	// anatomic site the sample obtained from
	AnatomicSiteTheSampleObtainedFrom *string `json:"anatomic_site_the_sample_obtained_from,omitempty" db:"anatomic_site_the_sample_obtained_from"`

	// associated biobank
	AssociatedBiobank *string `json:"associated_biobank,omitempty" db:"associated_biobank"`

	// cancer subtype
	CancerSubtype *string `json:"cancer_subtype,omitempty" db:"cancer_subtype"`

	// cancer type
	CancerType *string `json:"cancer_type,omitempty" db:"cancer_type"`

	// collection date
	CollectionDate *string `json:"collection_date,omitempty" db:"collection_date"`

	// collection hospital
	CollectionHospital *string `json:"collection_hospital,omitempty" db:"collection_hospital"`

	// diagnosis id
	DiagnosisID *string `json:"diagnosis_id,omitempty" db:"diagnosis_id"`

	// estimated tumour content
	EstimatedTumourContent *string `json:"estimated_tumour_content,omitempty" db:"estimated_tumour_content"`

	// if not explain any deviation
	IfNotExplainAnyDeviation *string `json:"if_not_explain_any_deviation,omitempty" db:"if_not_explain_any_deviation"`

	// local biobank id
	LocalBiobankID *string `json:"local_biobank_id,omitempty" db:"local_biobank_id"`

	// morphological code
	MorphologicalCode *string `json:"morphological_code,omitempty" db:"morphological_code"`

	// other biobank
	OtherBiobank *string `json:"other_biobank,omitempty" db:"other_biobank"`

	// pathology report id
	PathologyReportID *string `json:"pathology_report_id,omitempty" db:"pathology_report_id"`

	// quality control performed
	QualityControlPerformed *string `json:"quality_control_performed,omitempty" db:"quality_control_performed"`

	// quantity
	Quantity *string `json:"quantity,omitempty" db:"quantity"`

	// received date
	ReceivedDate *string `json:"received_date,omitempty" db:"received_date"`

	// sample id
	SampleID *string `json:"sample_id,omitempty" db:"sample_id"`

	// sample type
	SampleType *string `json:"sample_type,omitempty" db:"sample_type"`

	// shipping date
	ShippingDate *string `json:"shipping_date,omitempty" db:"shipping_date"`

	// sop followed
	SopFollowed *string `json:"sop_followed,omitempty" db:"sop_followed"`

	// tissue disease state
	TissueDiseaseState *string `json:"tissue_disease_state,omitempty" db:"tissue_disease_state"`

	// topological code
	TopologicalCode *string `json:"topological_code,omitempty" db:"topological_code"`

	// units
	Units *string `json:"units,omitempty" db:"units"`

	Complications []*Complication

	// consent
	Consents []*Consent

	// diagnosis
	Diagnosis []*Diagnosis

	// enrollment
	Enrollments []*Enrollment

	// outcome
	Outcomes []*Outcome

	// patient
	Patient *Patient

	// treatment
	Treatments []*Treatment

	// tumourboard
	Tumourboards []*Tumourboard
}

// Validate validates this sample
func (m *Sample) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *Sample) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Sample) UnmarshalBinary(b []byte) error {
	var res Sample
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
