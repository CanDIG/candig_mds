// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Diagnosis diagnosis
// swagger:model Diagnosis
type Diagnosis struct {

	// additional molecular testing
	AdditionalMolecularTesting *string `json:"additional_molecular_testing,omitempty" db:"additional_molecular_testing"`

	// age at diagnosis
	AgeAtDiagnosis *string `json:"age_at_diagnosis,omitempty" db:"age_at_diagnosis"`

	// biomarker quantification
	BiomarkerQuantification *string `json:"biomarker_quantification,omitempty" db:"biomarker_quantification"`

	// cancer site
	CancerSite *string `json:"cancer_site,omitempty" db:"cancer_site"`

	// cancer type
	CancerType *string `json:"cancer_type,omitempty" db:"cancer_type"`

	// classification
	Classification *string `json:"classification,omitempty" db:"classification"`

	// diagnosis date
	DiagnosisDate *string `json:"diagnosis_date,omitempty" db:"diagnosis_date"`

	// diagnosis id
	DiagnosisID *string `json:"diagnosis_id,omitempty" db:"diagnosis_id"`

	// grading system used
	GradingSystemUsed *string `json:"grading_system_used,omitempty" db:"grading_system_used"`

	// histology
	Histology *string `json:"histology,omitempty" db:"histology"`

	// method of definitive diagnosis
	MethodOfDefinitiveDiagnosis *string `json:"method_of_definitive_diagnosis,omitempty" db:"method_of_definitive_diagnosis"`

	// patient id
	PatientID *string `json:"patient_id,omitempty" db:"patient_id"`

	// prognostic biomarkers
	PrognosticBiomarkers *string `json:"prognostic_biomarkers,omitempty" db:"prognostic_biomarkers"`

	// sample site
	SampleSite *string `json:"sample_site,omitempty" db:"sample_site"`

	// sample type
	SampleType *string `json:"sample_type,omitempty" db:"sample_type"`

	// sites of metastases
	SitesOfMetastases *string `json:"sites_of_metastases,omitempty" db:"sites_of_metastases"`

	// specific tumour stage at diagnosis
	SpecificTumourStageAtDiagnosis *string `json:"specific_tumour_stage_at_diagnosis,omitempty" db:"specific_tumour_stage_at_diagnosis"`

	// staging system
	StagingSystem *string `json:"staging_system,omitempty" db:"staging_system"`

	// tumour grade
	TumourGrade *string `json:"tumour_grade,omitempty" db:"tumour_grade"`

	// version or edition of the staging system
	VersionOrEditionOfTheStagingSystem *string `json:"version_or_edition_of_the_staging_system,omitempty" db:"version_or_edition_of_the_staging_system"`
}

// Validate validates this diagnosis
func (m *Diagnosis) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *Diagnosis) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Diagnosis) UnmarshalBinary(b []byte) error {
	var res Diagnosis
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
