// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AddComplicationHandlerFunc turns a function with the right signature into a add complication handler
type AddComplicationHandlerFunc func(AddComplicationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddComplicationHandlerFunc) Handle(params AddComplicationParams) middleware.Responder {
	return fn(params)
}

// AddComplicationHandler interface for that can handle valid add complication params
type AddComplicationHandler interface {
	Handle(AddComplicationParams) middleware.Responder
}

// NewAddComplication creates a new http.Handler for the add complication operation
func NewAddComplication(ctx *middleware.Context, handler AddComplicationHandler) *AddComplication {
	return &AddComplication{Context: ctx, Handler: handler}
}

/*AddComplication swagger:route POST /complication addComplication

adds a complication

Adds a complication to the system

*/
type AddComplication struct {
	Context *middleware.Context
	Handler AddComplicationHandler
}

func (o *AddComplication) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddComplicationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
