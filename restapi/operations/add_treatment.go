// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AddTreatmentHandlerFunc turns a function with the right signature into a add treatment handler
type AddTreatmentHandlerFunc func(AddTreatmentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddTreatmentHandlerFunc) Handle(params AddTreatmentParams) middleware.Responder {
	return fn(params)
}

// AddTreatmentHandler interface for that can handle valid add treatment params
type AddTreatmentHandler interface {
	Handle(AddTreatmentParams) middleware.Responder
}

// NewAddTreatment creates a new http.Handler for the add treatment operation
func NewAddTreatment(ctx *middleware.Context, handler AddTreatmentHandler) *AddTreatment {
	return &AddTreatment{Context: ctx, Handler: handler}
}

/*AddTreatment swagger:route POST /treatment addTreatment

adds a treatment

Adds a treatment to the system

*/
type AddTreatment struct {
	Context *middleware.Context
	Handler AddTreatmentHandler
}

func (o *AddTreatment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddTreatmentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
