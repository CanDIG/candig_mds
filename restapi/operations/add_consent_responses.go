// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// AddConsentCreatedCode is the HTTP code returned for type AddConsentCreated
const AddConsentCreatedCode int = 201

/*AddConsentCreated item created

swagger:response addConsentCreated
*/
type AddConsentCreated struct {
}

// NewAddConsentCreated creates AddConsentCreated with default headers values
func NewAddConsentCreated() *AddConsentCreated {
	return &AddConsentCreated{}
}

// WriteResponse to the client
func (o *AddConsentCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// AddConsentBadRequestCode is the HTTP code returned for type AddConsentBadRequest
const AddConsentBadRequestCode int = 400

/*AddConsentBadRequest invalid input, object invalid

swagger:response addConsentBadRequest
*/
type AddConsentBadRequest struct {
}

// NewAddConsentBadRequest creates AddConsentBadRequest with default headers values
func NewAddConsentBadRequest() *AddConsentBadRequest {
	return &AddConsentBadRequest{}
}

// WriteResponse to the client
func (o *AddConsentBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// AddConsentConflictCode is the HTTP code returned for type AddConsentConflict
const AddConsentConflictCode int = 409

/*AddConsentConflict an existing item already exists

swagger:response addConsentConflict
*/
type AddConsentConflict struct {
}

// NewAddConsentConflict creates AddConsentConflict with default headers values
func NewAddConsentConflict() *AddConsentConflict {
	return &AddConsentConflict{}
}

// WriteResponse to the client
func (o *AddConsentConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(409)
}
